// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import ethereum "github.com/ethereum/go-ethereum"
import mock "github.com/stretchr/testify/mock"
import multiclient "github.com/getamis/hypereth/multiclient"
import rpc "github.com/ethereum/go-ethereum/rpc"

// Subscriber is an autogenerated mock type for the Subscriber type
type Subscriber struct {
	mock.Mock
}

// RPCClients provides a mock function with given fields:
func (_m *Subscriber) RPCClients() []*rpc.Client {
	ret := _m.Called()

	var r0 []*rpc.Client
	if rf, ok := ret.Get(0).(func() []*rpc.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*rpc.Client)
		}
	}

	return r0
}

// SubscribeNewHead provides a mock function with given fields: ctx, ch
func (_m *Subscriber) SubscribeNewHead(ctx context.Context, ch chan<- *multiclient.Header) (ethereum.Subscription, error) {
	ret := _m.Called(ctx, ch)

	var r0 ethereum.Subscription
	if rf, ok := ret.Get(0).(func(context.Context, chan<- *multiclient.Header) ethereum.Subscription); ok {
		r0 = rf(ctx, ch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ethereum.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, chan<- *multiclient.Header) error); ok {
		r1 = rf(ctx, ch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
